---
- name: "Ensure gpgcheck is globally activated"
  replace:
    name: /etc/yum.conf
    regexp: "^gpgcheck=0"
    replace: "gpgcheck=1"
  when: configure_software_updates == true

- name: "Ensure gpgcheck is globally activated"
  find:
    paths: /etc/yum.repos.d
    patterns: "*.repo"
  register: yum_repos
  changed_when: no
  when: configure_software_updates == true

- name: "Ensure gpgcheck is globally activated"
  replace:
    name: "{{ item.path }}"
    regexp: "^gpgcheck=0"
    replace: "gpgcheck=1"
  no_log: true
  with_items:
    - "{{ yum_repos.files }}"
  when: configure_software_updates == true

- name: "Ensure AIDE is installed"
  yum:
    name: aide
    state: present
  when: configure_filesystem_integrity_check == true

- name: "Ensure AIDE is installed (cent)"
  command: /usr/sbin/aide --init -B 'database_out=file:/var/lib/aide/aide.db.gz'
  args:
    creates: /var/lib/aide/aide.db.gz
  changed_when: no
  failed_when: no
  async: 45
  poll: 0
  when: configure_filesystem_integrity_check == true

- name: "Ensure filesystem integrity is regularly checked (centos)"
  cron:
    name: Run AIDE integrity check weekly
    cron_file: "{{ cron_file }}"
    user: "{{ cron_user }}"
    minute: "{{ aide_minute | default('0') }}"
    hour: "{{ aide_hour | default('5') }}"
    day: "{{ aide_day | default('*') }}"
    month: "{{ aide_month | default('*') }}"
    weekday: "{{ aide_weekday | default('*') }}"
    job: "{{ aide_job }}"
  when: configure_filesystem_integrity_check == true

- name: "Ensure core dumps are restricted"
  lineinfile:
    state: present
    dest: /etc/security/limits.conf
    regexp: '^#?\\*.*core'
    line: '*                hard    core            0'
    insertbefore: '^# End of file'
  when: configure_process_hardening == true

- name: "Ensure address space layout randomization (ASLR) is enabled"
  sysctl:
    name: kernel.randomize_va_space
    value: 2
    state: present
    reload: yes
    sysctl_set: yes
    ignoreerrors: yes
  when: configure_process_hardening == true

- name: "Check if prelink package is installed"
  command: rpm -q prelink
  register: prelink_installed
  changed_when: no
  failed_when: no
  check_mode: no

- name: "Ensure prelink is disabled"
  command: prelink -ua
  when:
    - prelink_installed.rc == 0
    - configure_process_hardening == true

- name: "Ensure prelink is disabled (centos)"
  yum:
    name: prelink
    state: absent
  when: configure_process_hardening == true


- name: "check if SELinux is installed"
  shell: rpm -qa libselinux
  register: libselinux
  failed_when: no
  changed_when: no

- name: "Ensure message of the day is configured properly"
  template:
    src: motd.j2
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644
  when: configure_banners == true

- name: "Ensure local login warning banner is configured properly"
  template:
    src: issue.j2
    dest: /etc/issue
    owner: root
    group: root
    mode: 0644
  when: configure_banners == true

- name: "Ensure remote login warning banner is configured properly"
  template:
    src: issue.net.j2
    dest: /etc/issue.net
    owner: root
    group: root
    mode: 0644
  when: configure_banners == true

- name: "Ensure GDM login banner is configured"
  lineinfile:
    dest: "{{ item.file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    create: yes
    owner: root
    group: root
    mode: 0644
  with_items:
    - { file: '/etc/dconf/profile/gdm', regexp:  'user-db', line: 'user-db:user' }
    - { file: '/etc/dconf/profile/gdm', regexp:  'system-db', line: 'system-db:gdm' }
    - { file: '/etc/dconf/profile/gdm', regexp:  'file-db', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults' }
    - { file: '/etc/dconf/db/gdm.d/01-banner-message', regexp:  '\[org\/gnome\/login-screen\]', line: '[org/gnome/login-screen]' }
    - { file: '/etc/dconf/db/gdm.d/01-banner-message', regexp:  'banner-message-enable', line: 'banner-message-enable=true' }
    - { file: '/etc/dconf/db/gdm.d/01-banner-message', regexp:  'banner-message-text', line: "banner-message-text='{{ warning_banner }}' " }
  when: banner_gui == true and configure_banners == true

- name: "Ensure permissions on /etc/ssh/sshd_config are configured"
  file:
    dest: /etc/ssh/sshd_config
    state: file
    owner: root
    group: root
    mode: 0600
  when: configure_ssh == true

- name: "Ensure SSH Protocol is set to 2"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^Protocol'
    line: Protocol {{Protocol}}
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH LogLevel is set to INFO"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^LogLevel'
    line: 'LogLevel {{LogLevel}}'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH X11 forwarding is disabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^X11Forwarding'
    line: 'X11Forwarding no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH MaxAuthTries is set to {{ MaxAuthTries }} or less"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?MaxAuthTries \d'
    line: 'MaxAuthTries {{ MaxAuthTries }}'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH IgnoreRhosts is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^IgnoreRhosts'
    line: 'IgnoreRhosts yes'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH KeepAlive is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^KeepAlive'
    line: 'KeepAlive yes'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH TCPKeepAlive is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^TCPKeepAlive'
    line: 'TCPKeepAlive yes'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH PrintMotd is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PrintMotd'
    line: 'PrintMotd yes'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH StrictModes is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^StrictModes'
    line: 'StrictModes yes'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH HostbasedAuthentication is disabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^HostbasedAuthentication'
    line: 'HostbasedAuthentication no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH root login is disabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH GatewayPorts is enabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^GatewayPorts'
    line: 'GatewayPorts no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH PermitEmptyPasswords is disabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH PermitUserEnvironment is disabled"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitUserEnvironment'
    line: 'PermitUserEnvironment no'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH Idle Timeout Interval is configured"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^ClientAliveInterval'
    line: "ClientAliveInterval {{ ClientAliveInterval }}"
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH ClientAliveCountMax set to <= 3"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^ClientAliveCountMax'
    line: "ClientAliveCountMax {{ ClientAliveCountMax }}"
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH LoginGraceTime is set to one minute or less"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^LoginGraceTime'
    line: 'LoginGraceTime {{ LoginGraceTime }}'
  notify:
    - restart sshd
  when: configure_ssh == true

- name: "Ensure SSH access is limited - allowusers"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    line: AllowUsers {{ allowusers }}
  notify:
    - restart sshd
  when: allowusers|default('') != '' and configure_ssh == true

- name: "Ensure SSH access is limited - allowgroups"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^AllowGroups"
    line: AllowGroups {{ allowgroups }}
  notify:
    - restart sshd
  when: allowgroups|default('') != '' and configure_ssh == true

- name: "Ensure SSH access is limited - denyusers"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^DenyUsers"
    line: DenyUsers {{ denyusers }}
  notify:
    - restart sshd
  when: denyusers|default('') != '' and configure_ssh == true

- name: "Ensure SSH access is limited - denygroups"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: "^DenyGroups"
    line: DenyGroups {{ denygroups }}
  notify:
    - restart sshd
  when: denygroups|default('') != '' and configure_ssh == true

- name: "Ensure SSH warning banner is configured"
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^Banner'
    line: 'Banner /etc/issue.net'
  notify:
    - restart sshd
  when: configure_crond == true and configure_banners == true

- name: "Ensure password creation requirements are configured"
  lineinfile:
    state: present
    dest: /etc/security/pwquality.conf
    regexp: '^{{ item.key }}'
    line: '{{ item.key }} = {{ item.value }}'
  with_items:
    - { key: 'minlen',  value: '14' }
    - { key: 'dcredit', value: '-1' }
    - { key: 'ucredit', value: '-1' }
    - { key: 'ocredit', value: '-1' }
    - { key: 'lcredit', value: '-1' }
  when: configure_pam == true

- name: "Ensure lockout for failed password attempts is configured (centOS)"
  lineinfile:
    state: present
    dest: "{{item.dest}}"
    line: "{{item.line}}"
  with_items:
  - { dest: '/etc/pam.d/password-auth', line: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900'}
  - { dest: '/etc/pam.d/password-auth', line: 'auth [success=1 default=bad] pam_unix.so'}
  - { dest: '/etc/pam.d/password-auth', line: 'auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900'}
  - { dest: '/etc/pam.d/password-auth', line: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900'}
  - { dest: '/etc/pam.d/system-auth', line: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900'}
  - { dest: '/etc/pam.d/system-auth', line: 'auth [success=1 default=bad] pam_unix.so'}
  - { dest: '/etc/pam.d/system-auth', line: 'auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900'}
  - { dest: '/etc/pam.d/system-auth', line: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900'}
  when: configure_pam == true

- name: "Ensure password reuse is limited"
  lineinfile:
    state: present
    dest: "{{item.dest}}"
    line: "{{item.line}}"
  with_items:
  - { dest: '/etc/pam.d/password-auth', line: 'password sufficient pam_unix.so remember=5'}
  - { dest: '/etc/pam.d/system-auth', line: 'password sufficient pam_unix.so remember=5'}
  when: configure_pam == true

- name: "Ensure password expiration is {{ PASS_MAX_DAYS }} days or less"
  lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: 'PASS_MAX_DAYS {{ PASS_MAX_DAYS }}'
  when: configure_usermanage == true